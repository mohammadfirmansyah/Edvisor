name: Update Release Badges

on:
  push:
    tags:
      - '*'
  release:
    types: [published]
  # Optionally, you can add workflow_dispatch, but it will fail if no tag info.

permissions:
  contents: write

jobs:
  update-badges:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract Release Info
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            PUBLISHED_AT=$(jq -r .release.published_at "$GITHUB_EVENT_PATH")
          elif [[ "${GITHUB_REF}" =~ refs/tags/(.*) ]]; then
            TAG_NAME=${BASH_REMATCH[1]}
            PUBLISHED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          else
            echo "No tag or release info found. Exiting."
            exit 1
          fi

          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "PUBLISHED_AT=${PUBLISHED_AT}" >> $GITHUB_OUTPUT

      - name: Determine Status/Color
        id: status
        run: |
          TAG="${{ steps.extract.outputs.TAG_NAME }}"
          STATUS="STABLE"
          COLOR="success"

          if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            STATUS="STABLE"
            COLOR="success"
          elif [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-([A-Za-z]+)\.[0-9]+$ ]]; then
            LABEL=${BASH_REMATCH[1]}
            STATUS=$(echo "$LABEL" | tr '[:lower:]' '[:upper:]')
            case "$STATUS" in
              ALPHA)
                COLOR="critical"
                ;;
              BETA|RC|HOTFIX)
                COLOR="important"
                ;;
              *)
                COLOR="success"
                ;;
            esac
          fi

          echo "STATUS=$STATUS" >> $GITHUB_OUTPUT
          echo "COLOR=$COLOR" >> $GITHUB_OUTPUT

      - name: Format Release Date
        id: format_date
        run: |
          LC_ALL=id_ID.UTF-8 sudo apt-get update && sudo apt-get install -y locales && sudo locale-gen id_ID.UTF-8
          PUBLISHED_AT="${{ steps.extract.outputs.PUBLISHED_AT }}"
          FDATE=$(LC_ALL=id_ID.UTF-8 date -d "$PUBLISHED_AT" +"%d %B %Y")
          echo "FORMATTED_DATE=$FDATE" >> $GITHUB_OUTPUT

      - name: Replace in README
        run: |
          sed -i "s|___LATEST_RELEASE_BADGE___|https://img.shields.io/badge/Latest%20Release-${{ steps.extract.outputs.TAG_NAME }}-informational?style=for-the-badge|g" README.md
          sed -i "s|___LATEST_STATUS_BADGE___|https://img.shields.io/badge/LATEST%20STATUS-${{ steps.status.outputs.STATUS }}-${{ steps.status.outputs.COLOR }}?style=for-the-badge|g" README.md
          sed -i "s|___LATEST_UPDATE_BADGE___|https://img.shields.io/badge/Latest%20Update-${{ steps.format_date.outputs.FORMATTED_DATE }}-lightgrey?style=for-the-badge|g" README.md

      - name: Commit & Push
        run: |
          git add README.md
          COMMIT_MSG="Update badges: ${{ steps.extract.outputs.TAG_NAME }} -> ${{ steps.status.outputs.STATUS }}"
          git commit -m "$COMMIT_MSG" || echo "No changes to commit."
          git push